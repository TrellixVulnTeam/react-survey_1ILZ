{"ast":null,"code":"// import React from \"react\";\n// import { useState, useEffect } from 'react';\n// import { useNavigate } from \"react-router-dom\";\n// import { StyledButton, StyledForm, StyledFormWrapper } from \"./Style.jsx\"\n// function Edit(userId) {\n//   const navigate = useNavigate()\n//   let iterator = []; // stores form's script\n//   const [questions, setQuestions] = useState([])\n//   const [choices, setChoices] = useState([])\n//   const [data, setData] = useState({\n//       name: \" \",\n//       id: userId,\n//       blue: false,\n//       red: false,\n//       green: false,\n//       yellow: false,\n//       purple: false,\n//       pink: false,\n//       python: false,\n//       java: false,\n//       ruby: false,\n//       javascript: false,\n//       golang: false,\n//       english: false,\n//       chinese: false,\n//       malay: false,\n//       tamil: false,\n//       hindi: false,\n//       yes: false,\n//       no: false \n//   })\n//     // fetch user's response\n//     useEffect(() => {\n//       const fetchData = async () => {\n//         const _data = await fetch(`http://localhost:3500/questions/responses/${userId}`)\n//           .then(res => res.json())\n//           .then(resJson => { \n//             console.log(resJson.userData)\n//             setData(resJson.userData[0])})\n//       }\n//       fetchData()\n//         .catch(console.error).then(() => {console.log(data)})\n//     }, [])\n//   // fecth questions from server \n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const _data = await fetch(\"http://localhost:3500/questions/list\")\n//         .then(res => res.json())\n//         .then(resJson => { setQuestions(resJson) })\n//     }\n//     fetchData()\n//       .catch(console.error)\n//   }, [])\n//   // fecth choices from server \n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const _data = await fetch(\"http://localhost:3500/questions/choice\")\n//         .then(res => res.json())\n//         .then(resJson => { setChoices(resJson) })\n//     }\n//     fetchData()\n//       .catch(console.error)\n//   }, [])\n//   // function _setData(resp) {\n//   //   console.log(resp)\n//   //   const keys = Object.keys(resp)\n//   //   let len = keys.length\n//   //   console.log(`${len} ${typeof(keys[0])}`)\n//   //   for (let i = 0; i < len; i++) {\n//   //     if (keys[i] === \"id\") {\n//   //       continue\n//   //     } else if (keys[i] === \"name\") {\n//   //       data[\"name\"] = resp[keys[i]]\n//   //       //handleChange(keys[i], resp[keys[i]])\n//   //     } else {\n//   //       const field = getResponseField(keys[i])\n//   //       handleCheckbox(keys[i], field, resp[keys[i]])\n//   //       console.log(resp)\n//   //     }\n//   //   }\n//   //   console.log(\"done\", data)\n//   // }\n//   // function getResponseField(val) {\n//   //   const keys = Object.keys(data)\n//   //   let curr = \"\"\n//   //   for(var key in keys) {\n//   //    // console.log(data[keys[key]])\n//   //     if(val in data) {\n//   //       curr = key\n//   //       break\n//   //     }\n//   //   }\n//   //   return curr\n//   // }\n//   // function handleChange(key, value) {\n//   //   const newData = { ...data } // copy curr data\n//   //   newData[key] = value\n//   //   setData(newData)\n//   // }\n//   // function handleCheckbox(key, field, value) {\n//   //   const newData = { ...data } // copy curr data\n//   //   const updatedField = newData[field]\n//   //   updatedField[key] = value\n//   //   newData[field] = updatedField\n//   //   setData(newData)\n//   // }\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     navigate(`/Result`)\n//   }\n//   /**\n//    * Generates HTML script to produce checkbox or radio inputs\n//    */\n//   function generateCheckBoxes(options, _id, _type) {\n//     const keys = Object.keys(options) \n//     for (var key in keys) { \n//       const val = options[key] // e.g. blue\n//       iterator.push(<p><input type={_type} name={_id} id={_id} value={val} checked={data[val]} /> {val}</p>)\n//     }\n//   }\n//   const choice_keys = Object.values(choices)\n//   function getOptions(questionId) {\n//     let options = []\n//     let i = 0;\n//     for (var key in choice_keys) {\n//       let curr = choices[key]\n//       if (String(curr[\"field2\"]) === questionId) {\n//         options[i] = curr[\"field3\"]\n//         i++\n//       }\n//     }\n//     return options\n//   }\n//   function getField(_id) {\n//     switch (_id) {\n//       case\"1\":\n//         return \"name\"\n//       case \"2\":\n//         return \"colour\"\n//       case \"3\":\n//         return \"prog_lang\"\n//       case \"4\":\n//         return \"languages\"\n//       case \"5\":\n//         return \"would_pay\"\n//       default:\n//         return \"invalid id\"\n//     }\n//   }\n//   /**\n//    * Generates HTML script to produce inputs\n//    */\n//   function generateInput(questionId, _type) {\n//     let field = getField(questionId) // value\n//     switch (_type) {\n//       case \"textbox\":\n//         console\n//         iterator.push(<input type=\"text\" required id={field} value={data[field]} />)\n//         break\n//       case \"radio\":\n//         return generateCheckBoxes(getOptions(questionId), field, \"radio\")\n//       case \"checkbox\":\n//         return generateCheckBoxes(getOptions(questionId), field, \"checkbox\")\n//       default:\n//         iterator.push(<div>Loading...</div>)\n//     }\n//   }\n//   const qn_keys = Object.keys(questions)\n//   for (var key in qn_keys) {\n//     const curr_qn = questions[key]\n//     iterator.push(<div><label>{curr_qn[\"field2\"]}</label></div>) // question\n//     generateInput(curr_qn[\"field1\"], curr_qn[\"field3\"]) // choices\n//   }\n//   return (\n//     <div>\n//       <StyledFormWrapper>\n//         <StyledForm onSubmit={e => handleSubmit(e)}>\n//           <div>\n//             <label>{iterator}</label>\n//           </div>\n//           <StyledButton type=\"submit\">submit</StyledButton>\n//         </StyledForm>\n//       </StyledFormWrapper>\n//     </div>\n//   )\n// }\n// export default Edit","map":{"version":3,"names":[],"sources":["/Users/vanessa/Desktop/survey/client/src/components/Edit.jsx"],"sourcesContent":["// import React from \"react\";\n// import { useState, useEffect } from 'react';\n// import { useNavigate } from \"react-router-dom\";\n// import { StyledButton, StyledForm, StyledFormWrapper } from \"./Style.jsx\"\n\n// function Edit(userId) {\n//   const navigate = useNavigate()\n//   let iterator = []; // stores form's script\n//   const [questions, setQuestions] = useState([])\n//   const [choices, setChoices] = useState([])\n//   const [data, setData] = useState({\n//       name: \" \",\n//       id: userId,\n//       blue: false,\n//       red: false,\n//       green: false,\n//       yellow: false,\n//       purple: false,\n//       pink: false,\n//       python: false,\n//       java: false,\n//       ruby: false,\n//       javascript: false,\n//       golang: false,\n//       english: false,\n//       chinese: false,\n//       malay: false,\n//       tamil: false,\n//       hindi: false,\n//       yes: false,\n//       no: false \n//   })\n\n//     // fetch user's response\n//     useEffect(() => {\n//       const fetchData = async () => {\n//         const _data = await fetch(`http://localhost:3500/questions/responses/${userId}`)\n//           .then(res => res.json())\n//           .then(resJson => { \n//             console.log(resJson.userData)\n//             setData(resJson.userData[0])})\n//       }\n  \n//       fetchData()\n//         .catch(console.error).then(() => {console.log(data)})\n//     }, [])\n\n//   // fecth questions from server \n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const _data = await fetch(\"http://localhost:3500/questions/list\")\n//         .then(res => res.json())\n//         .then(resJson => { setQuestions(resJson) })\n//     }\n\n//     fetchData()\n//       .catch(console.error)\n//   }, [])\n\n//   // fecth choices from server \n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const _data = await fetch(\"http://localhost:3500/questions/choice\")\n//         .then(res => res.json())\n//         .then(resJson => { setChoices(resJson) })\n//     }\n\n//     fetchData()\n//       .catch(console.error)\n//   }, [])\n\n//   // function _setData(resp) {\n//   //   console.log(resp)\n//   //   const keys = Object.keys(resp)\n//   //   let len = keys.length\n//   //   console.log(`${len} ${typeof(keys[0])}`)\n//   //   for (let i = 0; i < len; i++) {\n//   //     if (keys[i] === \"id\") {\n//   //       continue\n//   //     } else if (keys[i] === \"name\") {\n//   //       data[\"name\"] = resp[keys[i]]\n//   //       //handleChange(keys[i], resp[keys[i]])\n//   //     } else {\n//   //       const field = getResponseField(keys[i])\n//   //       handleCheckbox(keys[i], field, resp[keys[i]])\n//   //       console.log(resp)\n//   //     }\n//   //   }\n//   //   console.log(\"done\", data)\n//   // }\n\n//   // function getResponseField(val) {\n    \n//   //   const keys = Object.keys(data)\n//   //   let curr = \"\"\n//   //   for(var key in keys) {\n//   //    // console.log(data[keys[key]])\n//   //     if(val in data) {\n//   //       curr = key\n//   //       break\n//   //     }\n//   //   }\n//   //   return curr\n//   // }\n\n//   // function handleChange(key, value) {\n//   //   const newData = { ...data } // copy curr data\n//   //   newData[key] = value\n//   //   setData(newData)\n//   // }\n\n//   // function handleCheckbox(key, field, value) {\n//   //   const newData = { ...data } // copy curr data\n//   //   const updatedField = newData[field]\n//   //   updatedField[key] = value\n//   //   newData[field] = updatedField\n//   //   setData(newData)\n//   // }\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n//     navigate(`/Result`)\n//   }\n\n//   /**\n//    * Generates HTML script to produce checkbox or radio inputs\n//    */\n//   function generateCheckBoxes(options, _id, _type) {\n//     const keys = Object.keys(options) \n\n//     for (var key in keys) { \n//       const val = options[key] // e.g. blue\n//       iterator.push(<p><input type={_type} name={_id} id={_id} value={val} checked={data[val]} /> {val}</p>)\n//     }\n//   }\n\n//   const choice_keys = Object.values(choices)\n//   function getOptions(questionId) {\n//     let options = []\n//     let i = 0;\n//     for (var key in choice_keys) {\n//       let curr = choices[key]\n//       if (String(curr[\"field2\"]) === questionId) {\n//         options[i] = curr[\"field3\"]\n//         i++\n//       }\n//     }\n//     return options\n//   }\n\n//   function getField(_id) {\n//     switch (_id) {\n//       case\"1\":\n//         return \"name\"\n//       case \"2\":\n//         return \"colour\"\n//       case \"3\":\n//         return \"prog_lang\"\n//       case \"4\":\n//         return \"languages\"\n//       case \"5\":\n//         return \"would_pay\"\n//       default:\n//         return \"invalid id\"\n//     }\n//   }\n\n//   /**\n//    * Generates HTML script to produce inputs\n//    */\n//   function generateInput(questionId, _type) {\n//     let field = getField(questionId) // value\n\n//     switch (_type) {\n//       case \"textbox\":\n//         console\n//         iterator.push(<input type=\"text\" required id={field} value={data[field]} />)\n//         break\n//       case \"radio\":\n//         return generateCheckBoxes(getOptions(questionId), field, \"radio\")\n//       case \"checkbox\":\n//         return generateCheckBoxes(getOptions(questionId), field, \"checkbox\")\n//       default:\n//         iterator.push(<div>Loading...</div>)\n//     }\n//   }\n\n//   const qn_keys = Object.keys(questions)\n//   for (var key in qn_keys) {\n//     const curr_qn = questions[key]\n//     iterator.push(<div><label>{curr_qn[\"field2\"]}</label></div>) // question\n//     generateInput(curr_qn[\"field1\"], curr_qn[\"field3\"]) // choices\n//   }\n\n//   return (\n//     <div>\n//       <StyledFormWrapper>\n//         <StyledForm onSubmit={e => handleSubmit(e)}>\n//           <div>\n//             <label>{iterator}</label>\n//           </div>\n//           <StyledButton type=\"submit\">submit</StyledButton>\n//         </StyledForm>\n//       </StyledFormWrapper>\n//     </div>\n//   )\n// }\n\n// export default Edit\n"],"mappings},"metadata":{},"sourceType":"module"}